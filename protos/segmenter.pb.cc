// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: segmenter.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "segmenter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace segmenter {

namespace {

const ::google::protobuf::Descriptor* TaskConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartTaskReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartTaskReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskId_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopTaskReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopTaskReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeInterval_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeInterval_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPlayListConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPlayListConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPlayListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPlayListReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_segmenter_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_segmenter_2eproto() {
  protobuf_AddDesc_segmenter_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "segmenter.proto");
  GOOGLE_CHECK(file != NULL);
  TaskConfig_descriptor_ = file->message_type(0);
  static const int TaskConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskConfig, stream_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskConfig, segment_time_),
  };
  TaskConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskConfig_descriptor_,
      TaskConfig::default_instance_,
      TaskConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(TaskConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskConfig, _is_default_instance_));
  StartTaskReply_descriptor_ = file->message_type(1);
  static const int StartTaskReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTaskReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTaskReply, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTaskReply, errmsg_),
  };
  StartTaskReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StartTaskReply_descriptor_,
      StartTaskReply::default_instance_,
      StartTaskReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(StartTaskReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTaskReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTaskReply, _is_default_instance_));
  TaskId_descriptor_ = file->message_type(2);
  static const int TaskId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskId, id_),
  };
  TaskId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskId_descriptor_,
      TaskId::default_instance_,
      TaskId_offsets_,
      -1,
      -1,
      -1,
      sizeof(TaskId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskId, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskId, _is_default_instance_));
  StopTaskReply_descriptor_ = file->message_type(3);
  static const int StopTaskReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTaskReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTaskReply, errmsg_),
  };
  StopTaskReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopTaskReply_descriptor_,
      StopTaskReply::default_instance_,
      StopTaskReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(StopTaskReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTaskReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTaskReply, _is_default_instance_));
  TimeInterval_descriptor_ = file->message_type(4);
  static const int TimeInterval_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInterval, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInterval, end_time_),
  };
  TimeInterval_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimeInterval_descriptor_,
      TimeInterval::default_instance_,
      TimeInterval_offsets_,
      -1,
      -1,
      -1,
      sizeof(TimeInterval),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInterval, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInterval, _is_default_instance_));
  GetPlayListConfig_descriptor_ = file->message_type(5);
  static const int GetPlayListConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayListConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayListConfig, time_intervals_),
  };
  GetPlayListConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetPlayListConfig_descriptor_,
      GetPlayListConfig::default_instance_,
      GetPlayListConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetPlayListConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayListConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayListConfig, _is_default_instance_));
  GetPlayListReply_descriptor_ = file->message_type(6);
  static const int GetPlayListReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayListReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayListReply, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayListReply, playlist_url_),
  };
  GetPlayListReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetPlayListReply_descriptor_,
      GetPlayListReply::default_instance_,
      GetPlayListReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetPlayListReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayListReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayListReply, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_segmenter_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskConfig_descriptor_, &TaskConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StartTaskReply_descriptor_, &StartTaskReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskId_descriptor_, &TaskId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopTaskReply_descriptor_, &StopTaskReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimeInterval_descriptor_, &TimeInterval::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetPlayListConfig_descriptor_, &GetPlayListConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetPlayListReply_descriptor_, &GetPlayListReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_segmenter_2eproto() {
  delete TaskConfig::default_instance_;
  delete TaskConfig_reflection_;
  delete StartTaskReply::default_instance_;
  delete StartTaskReply_reflection_;
  delete TaskId::default_instance_;
  delete TaskId_reflection_;
  delete StopTaskReply::default_instance_;
  delete StopTaskReply_reflection_;
  delete TimeInterval::default_instance_;
  delete TimeInterval_reflection_;
  delete GetPlayListConfig::default_instance_;
  delete GetPlayListConfig_reflection_;
  delete GetPlayListReply::default_instance_;
  delete GetPlayListReply_reflection_;
}

void protobuf_AddDesc_segmenter_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_segmenter_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017segmenter.proto\022\tsegmenter\"6\n\nTaskConf"
    "ig\022\022\n\nstream_url\030\001 \001(\t\022\024\n\014segment_time\030\002"
    " \001(\r\"<\n\016StartTaskReply\022\016\n\006result\030\001 \001(\010\022\n"
    "\n\002id\030\002 \001(\r\022\016\n\006errmsg\030\003 \001(\t\"\024\n\006TaskId\022\n\n\002"
    "id\030\001 \001(\r\"/\n\rStopTaskReply\022\016\n\006result\030\001 \001("
    "\010\022\016\n\006errmsg\030\002 \001(\t\"4\n\014TimeInterval\022\022\n\nsta"
    "rt_time\030\001 \001(\003\022\020\n\010end_time\030\002 \001(\003\"P\n\021GetPl"
    "ayListConfig\022\n\n\002id\030\001 \001(\r\022/\n\016time_interva"
    "ls\030\002 \003(\0132\027.segmenter.TimeInterval\"H\n\020Get"
    "PlayListReply\022\016\n\006result\030\001 \001(\010\022\016\n\006errmsg\030"
    "\002 \001(\t\022\024\n\014playlist_url\030\003 \001(\t2\325\001\n\013TaskMana"
    "ger\022\?\n\tStartTask\022\025.segmenter.TaskConfig\032"
    "\031.segmenter.StartTaskReply\"\000\0229\n\010StopTask"
    "\022\021.segmenter.TaskId\032\030.segmenter.StopTask"
    "Reply\"\000\022J\n\013GetPlayList\022\034.segmenter.GetPl"
    "ayListConfig\032\033.segmenter.GetPlayListRepl"
    "y\"\000b\006proto3", 651);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "segmenter.proto", &protobuf_RegisterTypes);
  TaskConfig::default_instance_ = new TaskConfig();
  StartTaskReply::default_instance_ = new StartTaskReply();
  TaskId::default_instance_ = new TaskId();
  StopTaskReply::default_instance_ = new StopTaskReply();
  TimeInterval::default_instance_ = new TimeInterval();
  GetPlayListConfig::default_instance_ = new GetPlayListConfig();
  GetPlayListReply::default_instance_ = new GetPlayListReply();
  TaskConfig::default_instance_->InitAsDefaultInstance();
  StartTaskReply::default_instance_->InitAsDefaultInstance();
  TaskId::default_instance_->InitAsDefaultInstance();
  StopTaskReply::default_instance_->InitAsDefaultInstance();
  TimeInterval::default_instance_->InitAsDefaultInstance();
  GetPlayListConfig::default_instance_->InitAsDefaultInstance();
  GetPlayListReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_segmenter_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_segmenter_2eproto {
  StaticDescriptorInitializer_segmenter_2eproto() {
    protobuf_AddDesc_segmenter_2eproto();
  }
} static_descriptor_initializer_segmenter_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskConfig::kStreamUrlFieldNumber;
const int TaskConfig::kSegmentTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskConfig::TaskConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:segmenter.TaskConfig)
}

void TaskConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TaskConfig::TaskConfig(const TaskConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:segmenter.TaskConfig)
}

void TaskConfig::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stream_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  segment_time_ = 0u;
}

TaskConfig::~TaskConfig() {
  // @@protoc_insertion_point(destructor:segmenter.TaskConfig)
  SharedDtor();
}

void TaskConfig::SharedDtor() {
  stream_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TaskConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskConfig_descriptor_;
}

const TaskConfig& TaskConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmenter_2eproto();
  return *default_instance_;
}

TaskConfig* TaskConfig::default_instance_ = NULL;

TaskConfig* TaskConfig::New(::google::protobuf::Arena* arena) const {
  TaskConfig* n = new TaskConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:segmenter.TaskConfig)
  stream_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  segment_time_ = 0u;
}

bool TaskConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:segmenter.TaskConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stream_url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_url().data(), this->stream_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "segmenter.TaskConfig.stream_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_segment_time;
        break;
      }

      // optional uint32 segment_time = 2;
      case 2: {
        if (tag == 16) {
         parse_segment_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &segment_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:segmenter.TaskConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:segmenter.TaskConfig)
  return false;
#undef DO_
}

void TaskConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:segmenter.TaskConfig)
  // optional string stream_url = 1;
  if (this->stream_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_url().data(), this->stream_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "segmenter.TaskConfig.stream_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_url(), output);
  }

  // optional uint32 segment_time = 2;
  if (this->segment_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->segment_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:segmenter.TaskConfig)
}

::google::protobuf::uint8* TaskConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:segmenter.TaskConfig)
  // optional string stream_url = 1;
  if (this->stream_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_url().data(), this->stream_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "segmenter.TaskConfig.stream_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_url(), target);
  }

  // optional uint32 segment_time = 2;
  if (this->segment_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->segment_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:segmenter.TaskConfig)
  return target;
}

int TaskConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:segmenter.TaskConfig)
  int total_size = 0;

  // optional string stream_url = 1;
  if (this->stream_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_url());
  }

  // optional uint32 segment_time = 2;
  if (this->segment_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->segment_time());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:segmenter.TaskConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TaskConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:segmenter.TaskConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:segmenter.TaskConfig)
    MergeFrom(*source);
  }
}

void TaskConfig::MergeFrom(const TaskConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:segmenter.TaskConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.stream_url().size() > 0) {

    stream_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_url_);
  }
  if (from.segment_time() != 0) {
    set_segment_time(from.segment_time());
  }
}

void TaskConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:segmenter.TaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskConfig::CopyFrom(const TaskConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:segmenter.TaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskConfig::IsInitialized() const {

  return true;
}

void TaskConfig::Swap(TaskConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskConfig::InternalSwap(TaskConfig* other) {
  stream_url_.Swap(&other->stream_url_);
  std::swap(segment_time_, other->segment_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskConfig_descriptor_;
  metadata.reflection = TaskConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskConfig

// optional string stream_url = 1;
void TaskConfig::clear_stream_url() {
  stream_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TaskConfig::stream_url() const {
  // @@protoc_insertion_point(field_get:segmenter.TaskConfig.stream_url)
  return stream_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskConfig::set_stream_url(const ::std::string& value) {
  
  stream_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:segmenter.TaskConfig.stream_url)
}
 void TaskConfig::set_stream_url(const char* value) {
  
  stream_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:segmenter.TaskConfig.stream_url)
}
 void TaskConfig::set_stream_url(const char* value, size_t size) {
  
  stream_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:segmenter.TaskConfig.stream_url)
}
 ::std::string* TaskConfig::mutable_stream_url() {
  
  // @@protoc_insertion_point(field_mutable:segmenter.TaskConfig.stream_url)
  return stream_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TaskConfig::release_stream_url() {
  // @@protoc_insertion_point(field_release:segmenter.TaskConfig.stream_url)
  
  return stream_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskConfig::set_allocated_stream_url(::std::string* stream_url) {
  if (stream_url != NULL) {
    
  } else {
    
  }
  stream_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_url);
  // @@protoc_insertion_point(field_set_allocated:segmenter.TaskConfig.stream_url)
}

// optional uint32 segment_time = 2;
void TaskConfig::clear_segment_time() {
  segment_time_ = 0u;
}
 ::google::protobuf::uint32 TaskConfig::segment_time() const {
  // @@protoc_insertion_point(field_get:segmenter.TaskConfig.segment_time)
  return segment_time_;
}
 void TaskConfig::set_segment_time(::google::protobuf::uint32 value) {
  
  segment_time_ = value;
  // @@protoc_insertion_point(field_set:segmenter.TaskConfig.segment_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartTaskReply::kResultFieldNumber;
const int StartTaskReply::kIdFieldNumber;
const int StartTaskReply::kErrmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartTaskReply::StartTaskReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:segmenter.StartTaskReply)
}

void StartTaskReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StartTaskReply::StartTaskReply(const StartTaskReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:segmenter.StartTaskReply)
}

void StartTaskReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = false;
  id_ = 0u;
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StartTaskReply::~StartTaskReply() {
  // @@protoc_insertion_point(destructor:segmenter.StartTaskReply)
  SharedDtor();
}

void StartTaskReply::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StartTaskReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartTaskReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartTaskReply_descriptor_;
}

const StartTaskReply& StartTaskReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmenter_2eproto();
  return *default_instance_;
}

StartTaskReply* StartTaskReply::default_instance_ = NULL;

StartTaskReply* StartTaskReply::New(::google::protobuf::Arena* arena) const {
  StartTaskReply* n = new StartTaskReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartTaskReply::Clear() {
// @@protoc_insertion_point(message_clear_start:segmenter.StartTaskReply)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StartTaskReply, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StartTaskReply*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_, id_);
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool StartTaskReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:segmenter.StartTaskReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 3;
      case 3: {
        if (tag == 26) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "segmenter.StartTaskReply.errmsg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:segmenter.StartTaskReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:segmenter.StartTaskReply)
  return false;
#undef DO_
}

void StartTaskReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:segmenter.StartTaskReply)
  // optional bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "segmenter.StartTaskReply.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // @@protoc_insertion_point(serialize_end:segmenter.StartTaskReply)
}

::google::protobuf::uint8* StartTaskReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:segmenter.StartTaskReply)
  // optional bool result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "segmenter.StartTaskReply.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:segmenter.StartTaskReply)
  return target;
}

int StartTaskReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:segmenter.StartTaskReply)
  int total_size = 0;

  // optional bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional string errmsg = 3;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartTaskReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:segmenter.StartTaskReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StartTaskReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StartTaskReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:segmenter.StartTaskReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:segmenter.StartTaskReply)
    MergeFrom(*source);
  }
}

void StartTaskReply::MergeFrom(const StartTaskReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:segmenter.StartTaskReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
}

void StartTaskReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:segmenter.StartTaskReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartTaskReply::CopyFrom(const StartTaskReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:segmenter.StartTaskReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartTaskReply::IsInitialized() const {

  return true;
}

void StartTaskReply::Swap(StartTaskReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartTaskReply::InternalSwap(StartTaskReply* other) {
  std::swap(result_, other->result_);
  std::swap(id_, other->id_);
  errmsg_.Swap(&other->errmsg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartTaskReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartTaskReply_descriptor_;
  metadata.reflection = StartTaskReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartTaskReply

// optional bool result = 1;
void StartTaskReply::clear_result() {
  result_ = false;
}
 bool StartTaskReply::result() const {
  // @@protoc_insertion_point(field_get:segmenter.StartTaskReply.result)
  return result_;
}
 void StartTaskReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:segmenter.StartTaskReply.result)
}

// optional uint32 id = 2;
void StartTaskReply::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 StartTaskReply::id() const {
  // @@protoc_insertion_point(field_get:segmenter.StartTaskReply.id)
  return id_;
}
 void StartTaskReply::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:segmenter.StartTaskReply.id)
}

// optional string errmsg = 3;
void StartTaskReply::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StartTaskReply::errmsg() const {
  // @@protoc_insertion_point(field_get:segmenter.StartTaskReply.errmsg)
  return errmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StartTaskReply::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:segmenter.StartTaskReply.errmsg)
}
 void StartTaskReply::set_errmsg(const char* value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:segmenter.StartTaskReply.errmsg)
}
 void StartTaskReply::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:segmenter.StartTaskReply.errmsg)
}
 ::std::string* StartTaskReply::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:segmenter.StartTaskReply.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StartTaskReply::release_errmsg() {
  // @@protoc_insertion_point(field_release:segmenter.StartTaskReply.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StartTaskReply::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:segmenter.StartTaskReply.errmsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskId::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskId::TaskId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:segmenter.TaskId)
}

void TaskId::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TaskId::TaskId(const TaskId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:segmenter.TaskId)
}

void TaskId::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0u;
}

TaskId::~TaskId() {
  // @@protoc_insertion_point(destructor:segmenter.TaskId)
  SharedDtor();
}

void TaskId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskId_descriptor_;
}

const TaskId& TaskId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmenter_2eproto();
  return *default_instance_;
}

TaskId* TaskId::default_instance_ = NULL;

TaskId* TaskId::New(::google::protobuf::Arena* arena) const {
  TaskId* n = new TaskId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskId::Clear() {
// @@protoc_insertion_point(message_clear_start:segmenter.TaskId)
  id_ = 0u;
}

bool TaskId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:segmenter.TaskId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:segmenter.TaskId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:segmenter.TaskId)
  return false;
#undef DO_
}

void TaskId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:segmenter.TaskId)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:segmenter.TaskId)
}

::google::protobuf::uint8* TaskId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:segmenter.TaskId)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:segmenter.TaskId)
  return target;
}

int TaskId::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:segmenter.TaskId)
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:segmenter.TaskId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TaskId* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:segmenter.TaskId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:segmenter.TaskId)
    MergeFrom(*source);
  }
}

void TaskId::MergeFrom(const TaskId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:segmenter.TaskId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void TaskId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:segmenter.TaskId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskId::CopyFrom(const TaskId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:segmenter.TaskId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskId::IsInitialized() const {

  return true;
}

void TaskId::Swap(TaskId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskId::InternalSwap(TaskId* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskId_descriptor_;
  metadata.reflection = TaskId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskId

// optional uint32 id = 1;
void TaskId::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 TaskId::id() const {
  // @@protoc_insertion_point(field_get:segmenter.TaskId.id)
  return id_;
}
 void TaskId::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:segmenter.TaskId.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopTaskReply::kResultFieldNumber;
const int StopTaskReply::kErrmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopTaskReply::StopTaskReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:segmenter.StopTaskReply)
}

void StopTaskReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StopTaskReply::StopTaskReply(const StopTaskReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:segmenter.StopTaskReply)
}

void StopTaskReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = false;
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StopTaskReply::~StopTaskReply() {
  // @@protoc_insertion_point(destructor:segmenter.StopTaskReply)
  SharedDtor();
}

void StopTaskReply::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StopTaskReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopTaskReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopTaskReply_descriptor_;
}

const StopTaskReply& StopTaskReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmenter_2eproto();
  return *default_instance_;
}

StopTaskReply* StopTaskReply::default_instance_ = NULL;

StopTaskReply* StopTaskReply::New(::google::protobuf::Arena* arena) const {
  StopTaskReply* n = new StopTaskReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopTaskReply::Clear() {
// @@protoc_insertion_point(message_clear_start:segmenter.StopTaskReply)
  result_ = false;
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StopTaskReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:segmenter.StopTaskReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "segmenter.StopTaskReply.errmsg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:segmenter.StopTaskReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:segmenter.StopTaskReply)
  return false;
#undef DO_
}

void StopTaskReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:segmenter.StopTaskReply)
  // optional bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional string errmsg = 2;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "segmenter.StopTaskReply.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // @@protoc_insertion_point(serialize_end:segmenter.StopTaskReply)
}

::google::protobuf::uint8* StopTaskReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:segmenter.StopTaskReply)
  // optional bool result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional string errmsg = 2;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "segmenter.StopTaskReply.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:segmenter.StopTaskReply)
  return target;
}

int StopTaskReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:segmenter.StopTaskReply)
  int total_size = 0;

  // optional bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  // optional string errmsg = 2;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopTaskReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:segmenter.StopTaskReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StopTaskReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StopTaskReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:segmenter.StopTaskReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:segmenter.StopTaskReply)
    MergeFrom(*source);
  }
}

void StopTaskReply::MergeFrom(const StopTaskReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:segmenter.StopTaskReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
}

void StopTaskReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:segmenter.StopTaskReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopTaskReply::CopyFrom(const StopTaskReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:segmenter.StopTaskReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopTaskReply::IsInitialized() const {

  return true;
}

void StopTaskReply::Swap(StopTaskReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopTaskReply::InternalSwap(StopTaskReply* other) {
  std::swap(result_, other->result_);
  errmsg_.Swap(&other->errmsg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopTaskReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopTaskReply_descriptor_;
  metadata.reflection = StopTaskReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopTaskReply

// optional bool result = 1;
void StopTaskReply::clear_result() {
  result_ = false;
}
 bool StopTaskReply::result() const {
  // @@protoc_insertion_point(field_get:segmenter.StopTaskReply.result)
  return result_;
}
 void StopTaskReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:segmenter.StopTaskReply.result)
}

// optional string errmsg = 2;
void StopTaskReply::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StopTaskReply::errmsg() const {
  // @@protoc_insertion_point(field_get:segmenter.StopTaskReply.errmsg)
  return errmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopTaskReply::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:segmenter.StopTaskReply.errmsg)
}
 void StopTaskReply::set_errmsg(const char* value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:segmenter.StopTaskReply.errmsg)
}
 void StopTaskReply::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:segmenter.StopTaskReply.errmsg)
}
 ::std::string* StopTaskReply::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:segmenter.StopTaskReply.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StopTaskReply::release_errmsg() {
  // @@protoc_insertion_point(field_release:segmenter.StopTaskReply.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopTaskReply::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:segmenter.StopTaskReply.errmsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeInterval::kStartTimeFieldNumber;
const int TimeInterval::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeInterval::TimeInterval()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:segmenter.TimeInterval)
}

void TimeInterval::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TimeInterval::TimeInterval(const TimeInterval& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:segmenter.TimeInterval)
}

void TimeInterval::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
}

TimeInterval::~TimeInterval() {
  // @@protoc_insertion_point(destructor:segmenter.TimeInterval)
  SharedDtor();
}

void TimeInterval::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeInterval::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeInterval::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeInterval_descriptor_;
}

const TimeInterval& TimeInterval::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmenter_2eproto();
  return *default_instance_;
}

TimeInterval* TimeInterval::default_instance_ = NULL;

TimeInterval* TimeInterval::New(::google::protobuf::Arena* arena) const {
  TimeInterval* n = new TimeInterval;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:segmenter.TimeInterval)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TimeInterval, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TimeInterval*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_time_, end_time_);

#undef ZR_HELPER_
#undef ZR_

}

bool TimeInterval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:segmenter.TimeInterval)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 2;
      case 2: {
        if (tag == 16) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:segmenter.TimeInterval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:segmenter.TimeInterval)
  return false;
#undef DO_
}

void TimeInterval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:segmenter.TimeInterval)
  // optional int64 start_time = 1;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_time(), output);
  }

  // optional int64 end_time = 2;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:segmenter.TimeInterval)
}

::google::protobuf::uint8* TimeInterval::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:segmenter.TimeInterval)
  // optional int64 start_time = 1;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start_time(), target);
  }

  // optional int64 end_time = 2;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:segmenter.TimeInterval)
  return target;
}

int TimeInterval::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:segmenter.TimeInterval)
  int total_size = 0;

  // optional int64 start_time = 1;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start_time());
  }

  // optional int64 end_time = 2;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end_time());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeInterval::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:segmenter.TimeInterval)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TimeInterval* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeInterval>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:segmenter.TimeInterval)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:segmenter.TimeInterval)
    MergeFrom(*source);
  }
}

void TimeInterval::MergeFrom(const TimeInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:segmenter.TimeInterval)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
}

void TimeInterval::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:segmenter.TimeInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeInterval::CopyFrom(const TimeInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:segmenter.TimeInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeInterval::IsInitialized() const {

  return true;
}

void TimeInterval::Swap(TimeInterval* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeInterval::InternalSwap(TimeInterval* other) {
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeInterval::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeInterval_descriptor_;
  metadata.reflection = TimeInterval_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeInterval

// optional int64 start_time = 1;
void TimeInterval::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 TimeInterval::start_time() const {
  // @@protoc_insertion_point(field_get:segmenter.TimeInterval.start_time)
  return start_time_;
}
 void TimeInterval::set_start_time(::google::protobuf::int64 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:segmenter.TimeInterval.start_time)
}

// optional int64 end_time = 2;
void TimeInterval::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 TimeInterval::end_time() const {
  // @@protoc_insertion_point(field_get:segmenter.TimeInterval.end_time)
  return end_time_;
}
 void TimeInterval::set_end_time(::google::protobuf::int64 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:segmenter.TimeInterval.end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPlayListConfig::kIdFieldNumber;
const int GetPlayListConfig::kTimeIntervalsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPlayListConfig::GetPlayListConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:segmenter.GetPlayListConfig)
}

void GetPlayListConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetPlayListConfig::GetPlayListConfig(const GetPlayListConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:segmenter.GetPlayListConfig)
}

void GetPlayListConfig::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0u;
}

GetPlayListConfig::~GetPlayListConfig() {
  // @@protoc_insertion_point(destructor:segmenter.GetPlayListConfig)
  SharedDtor();
}

void GetPlayListConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPlayListConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPlayListConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPlayListConfig_descriptor_;
}

const GetPlayListConfig& GetPlayListConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmenter_2eproto();
  return *default_instance_;
}

GetPlayListConfig* GetPlayListConfig::default_instance_ = NULL;

GetPlayListConfig* GetPlayListConfig::New(::google::protobuf::Arena* arena) const {
  GetPlayListConfig* n = new GetPlayListConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPlayListConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:segmenter.GetPlayListConfig)
  id_ = 0u;
  time_intervals_.Clear();
}

bool GetPlayListConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:segmenter.GetPlayListConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_time_intervals;
        break;
      }

      // repeated .segmenter.TimeInterval time_intervals = 2;
      case 2: {
        if (tag == 18) {
         parse_time_intervals:
          DO_(input->IncrementRecursionDepth());
         parse_loop_time_intervals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_time_intervals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_time_intervals;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:segmenter.GetPlayListConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:segmenter.GetPlayListConfig)
  return false;
#undef DO_
}

void GetPlayListConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:segmenter.GetPlayListConfig)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .segmenter.TimeInterval time_intervals = 2;
  for (unsigned int i = 0, n = this->time_intervals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->time_intervals(i), output);
  }

  // @@protoc_insertion_point(serialize_end:segmenter.GetPlayListConfig)
}

::google::protobuf::uint8* GetPlayListConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:segmenter.GetPlayListConfig)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .segmenter.TimeInterval time_intervals = 2;
  for (unsigned int i = 0, n = this->time_intervals_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->time_intervals(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:segmenter.GetPlayListConfig)
  return target;
}

int GetPlayListConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:segmenter.GetPlayListConfig)
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // repeated .segmenter.TimeInterval time_intervals = 2;
  total_size += 1 * this->time_intervals_size();
  for (int i = 0; i < this->time_intervals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->time_intervals(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPlayListConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:segmenter.GetPlayListConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetPlayListConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPlayListConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:segmenter.GetPlayListConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:segmenter.GetPlayListConfig)
    MergeFrom(*source);
  }
}

void GetPlayListConfig::MergeFrom(const GetPlayListConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:segmenter.GetPlayListConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  time_intervals_.MergeFrom(from.time_intervals_);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void GetPlayListConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:segmenter.GetPlayListConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayListConfig::CopyFrom(const GetPlayListConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:segmenter.GetPlayListConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayListConfig::IsInitialized() const {

  return true;
}

void GetPlayListConfig::Swap(GetPlayListConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPlayListConfig::InternalSwap(GetPlayListConfig* other) {
  std::swap(id_, other->id_);
  time_intervals_.UnsafeArenaSwap(&other->time_intervals_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPlayListConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPlayListConfig_descriptor_;
  metadata.reflection = GetPlayListConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPlayListConfig

// optional uint32 id = 1;
void GetPlayListConfig::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 GetPlayListConfig::id() const {
  // @@protoc_insertion_point(field_get:segmenter.GetPlayListConfig.id)
  return id_;
}
 void GetPlayListConfig::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:segmenter.GetPlayListConfig.id)
}

// repeated .segmenter.TimeInterval time_intervals = 2;
int GetPlayListConfig::time_intervals_size() const {
  return time_intervals_.size();
}
void GetPlayListConfig::clear_time_intervals() {
  time_intervals_.Clear();
}
const ::segmenter::TimeInterval& GetPlayListConfig::time_intervals(int index) const {
  // @@protoc_insertion_point(field_get:segmenter.GetPlayListConfig.time_intervals)
  return time_intervals_.Get(index);
}
::segmenter::TimeInterval* GetPlayListConfig::mutable_time_intervals(int index) {
  // @@protoc_insertion_point(field_mutable:segmenter.GetPlayListConfig.time_intervals)
  return time_intervals_.Mutable(index);
}
::segmenter::TimeInterval* GetPlayListConfig::add_time_intervals() {
  // @@protoc_insertion_point(field_add:segmenter.GetPlayListConfig.time_intervals)
  return time_intervals_.Add();
}
::google::protobuf::RepeatedPtrField< ::segmenter::TimeInterval >*
GetPlayListConfig::mutable_time_intervals() {
  // @@protoc_insertion_point(field_mutable_list:segmenter.GetPlayListConfig.time_intervals)
  return &time_intervals_;
}
const ::google::protobuf::RepeatedPtrField< ::segmenter::TimeInterval >&
GetPlayListConfig::time_intervals() const {
  // @@protoc_insertion_point(field_list:segmenter.GetPlayListConfig.time_intervals)
  return time_intervals_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPlayListReply::kResultFieldNumber;
const int GetPlayListReply::kErrmsgFieldNumber;
const int GetPlayListReply::kPlaylistUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPlayListReply::GetPlayListReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:segmenter.GetPlayListReply)
}

void GetPlayListReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetPlayListReply::GetPlayListReply(const GetPlayListReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:segmenter.GetPlayListReply)
}

void GetPlayListReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = false;
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playlist_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetPlayListReply::~GetPlayListReply() {
  // @@protoc_insertion_point(destructor:segmenter.GetPlayListReply)
  SharedDtor();
}

void GetPlayListReply::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playlist_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetPlayListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPlayListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPlayListReply_descriptor_;
}

const GetPlayListReply& GetPlayListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmenter_2eproto();
  return *default_instance_;
}

GetPlayListReply* GetPlayListReply::default_instance_ = NULL;

GetPlayListReply* GetPlayListReply::New(::google::protobuf::Arena* arena) const {
  GetPlayListReply* n = new GetPlayListReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPlayListReply::Clear() {
// @@protoc_insertion_point(message_clear_start:segmenter.GetPlayListReply)
  result_ = false;
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playlist_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetPlayListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:segmenter.GetPlayListReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "segmenter.GetPlayListReply.errmsg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playlist_url;
        break;
      }

      // optional string playlist_url = 3;
      case 3: {
        if (tag == 26) {
         parse_playlist_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playlist_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playlist_url().data(), this->playlist_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "segmenter.GetPlayListReply.playlist_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:segmenter.GetPlayListReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:segmenter.GetPlayListReply)
  return false;
#undef DO_
}

void GetPlayListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:segmenter.GetPlayListReply)
  // optional bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional string errmsg = 2;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "segmenter.GetPlayListReply.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional string playlist_url = 3;
  if (this->playlist_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playlist_url().data(), this->playlist_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "segmenter.GetPlayListReply.playlist_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->playlist_url(), output);
  }

  // @@protoc_insertion_point(serialize_end:segmenter.GetPlayListReply)
}

::google::protobuf::uint8* GetPlayListReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:segmenter.GetPlayListReply)
  // optional bool result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional string errmsg = 2;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "segmenter.GetPlayListReply.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional string playlist_url = 3;
  if (this->playlist_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playlist_url().data(), this->playlist_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "segmenter.GetPlayListReply.playlist_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playlist_url(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:segmenter.GetPlayListReply)
  return target;
}

int GetPlayListReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:segmenter.GetPlayListReply)
  int total_size = 0;

  // optional bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  // optional string errmsg = 2;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  // optional string playlist_url = 3;
  if (this->playlist_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playlist_url());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPlayListReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:segmenter.GetPlayListReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetPlayListReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPlayListReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:segmenter.GetPlayListReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:segmenter.GetPlayListReply)
    MergeFrom(*source);
  }
}

void GetPlayListReply::MergeFrom(const GetPlayListReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:segmenter.GetPlayListReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.playlist_url().size() > 0) {

    playlist_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playlist_url_);
  }
}

void GetPlayListReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:segmenter.GetPlayListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayListReply::CopyFrom(const GetPlayListReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:segmenter.GetPlayListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayListReply::IsInitialized() const {

  return true;
}

void GetPlayListReply::Swap(GetPlayListReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPlayListReply::InternalSwap(GetPlayListReply* other) {
  std::swap(result_, other->result_);
  errmsg_.Swap(&other->errmsg_);
  playlist_url_.Swap(&other->playlist_url_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPlayListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPlayListReply_descriptor_;
  metadata.reflection = GetPlayListReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPlayListReply

// optional bool result = 1;
void GetPlayListReply::clear_result() {
  result_ = false;
}
 bool GetPlayListReply::result() const {
  // @@protoc_insertion_point(field_get:segmenter.GetPlayListReply.result)
  return result_;
}
 void GetPlayListReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:segmenter.GetPlayListReply.result)
}

// optional string errmsg = 2;
void GetPlayListReply::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetPlayListReply::errmsg() const {
  // @@protoc_insertion_point(field_get:segmenter.GetPlayListReply.errmsg)
  return errmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetPlayListReply::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:segmenter.GetPlayListReply.errmsg)
}
 void GetPlayListReply::set_errmsg(const char* value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:segmenter.GetPlayListReply.errmsg)
}
 void GetPlayListReply::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:segmenter.GetPlayListReply.errmsg)
}
 ::std::string* GetPlayListReply::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:segmenter.GetPlayListReply.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetPlayListReply::release_errmsg() {
  // @@protoc_insertion_point(field_release:segmenter.GetPlayListReply.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetPlayListReply::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:segmenter.GetPlayListReply.errmsg)
}

// optional string playlist_url = 3;
void GetPlayListReply::clear_playlist_url() {
  playlist_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetPlayListReply::playlist_url() const {
  // @@protoc_insertion_point(field_get:segmenter.GetPlayListReply.playlist_url)
  return playlist_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetPlayListReply::set_playlist_url(const ::std::string& value) {
  
  playlist_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:segmenter.GetPlayListReply.playlist_url)
}
 void GetPlayListReply::set_playlist_url(const char* value) {
  
  playlist_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:segmenter.GetPlayListReply.playlist_url)
}
 void GetPlayListReply::set_playlist_url(const char* value, size_t size) {
  
  playlist_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:segmenter.GetPlayListReply.playlist_url)
}
 ::std::string* GetPlayListReply::mutable_playlist_url() {
  
  // @@protoc_insertion_point(field_mutable:segmenter.GetPlayListReply.playlist_url)
  return playlist_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetPlayListReply::release_playlist_url() {
  // @@protoc_insertion_point(field_release:segmenter.GetPlayListReply.playlist_url)
  
  return playlist_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetPlayListReply::set_allocated_playlist_url(::std::string* playlist_url) {
  if (playlist_url != NULL) {
    
  } else {
    
  }
  playlist_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playlist_url);
  // @@protoc_insertion_point(field_set_allocated:segmenter.GetPlayListReply.playlist_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace segmenter

// @@protoc_insertion_point(global_scope)
