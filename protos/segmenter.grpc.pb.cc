// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: segmenter.proto

#include "segmenter.pb.h"
#include "segmenter.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace segmenter {

static const char* TaskManager_method_names[] = {
  "/segmenter.TaskManager/StartTask",
  "/segmenter.TaskManager/StopTask",
  "/segmenter.TaskManager/GetPlayList",
};

std::unique_ptr< TaskManager::Stub> TaskManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< TaskManager::Stub> stub(new TaskManager::Stub(channel));
  return stub;
}

TaskManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_StartTask_(TaskManager_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopTask_(TaskManager_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPlayList_(TaskManager_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TaskManager::Stub::StartTask(::grpc::ClientContext* context, const ::segmenter::TaskConfig& request, ::segmenter::StartTaskReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_StartTask_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::segmenter::StartTaskReply>* TaskManager::Stub::AsyncStartTaskRaw(::grpc::ClientContext* context, const ::segmenter::TaskConfig& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::segmenter::StartTaskReply>(channel_.get(), cq, rpcmethod_StartTask_, context, request);
}

::grpc::Status TaskManager::Stub::StopTask(::grpc::ClientContext* context, const ::segmenter::TaskId& request, ::segmenter::StopTaskReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_StopTask_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::segmenter::StopTaskReply>* TaskManager::Stub::AsyncStopTaskRaw(::grpc::ClientContext* context, const ::segmenter::TaskId& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::segmenter::StopTaskReply>(channel_.get(), cq, rpcmethod_StopTask_, context, request);
}

::grpc::Status TaskManager::Stub::GetPlayList(::grpc::ClientContext* context, const ::segmenter::GetPlayListConfig& request, ::segmenter::GetPlayListReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetPlayList_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::segmenter::GetPlayListReply>* TaskManager::Stub::AsyncGetPlayListRaw(::grpc::ClientContext* context, const ::segmenter::GetPlayListConfig& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::segmenter::GetPlayListReply>(channel_.get(), cq, rpcmethod_GetPlayList_, context, request);
}

TaskManager::Service::Service() {
  (void)TaskManager_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      TaskManager_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< TaskManager::Service, ::segmenter::TaskConfig, ::segmenter::StartTaskReply>(
          std::mem_fn(&TaskManager::Service::StartTask), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      TaskManager_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< TaskManager::Service, ::segmenter::TaskId, ::segmenter::StopTaskReply>(
          std::mem_fn(&TaskManager::Service::StopTask), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      TaskManager_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< TaskManager::Service, ::segmenter::GetPlayListConfig, ::segmenter::GetPlayListReply>(
          std::mem_fn(&TaskManager::Service::GetPlayList), this)));
}

TaskManager::Service::~Service() {
}

::grpc::Status TaskManager::Service::StartTask(::grpc::ServerContext* context, const ::segmenter::TaskConfig* request, ::segmenter::StartTaskReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TaskManager::Service::StopTask(::grpc::ServerContext* context, const ::segmenter::TaskId* request, ::segmenter::StopTaskReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TaskManager::Service::GetPlayList(::grpc::ServerContext* context, const ::segmenter::GetPlayListConfig* request, ::segmenter::GetPlayListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace segmenter

