// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: segmenter.proto

#ifndef PROTOBUF_segmenter_2eproto__INCLUDED
#define PROTOBUF_segmenter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace segmenter {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_segmenter_2eproto();
void protobuf_AssignDesc_segmenter_2eproto();
void protobuf_ShutdownFile_segmenter_2eproto();

class GetPlayListConfig;
class GetPlayListReply;
class StartTaskReply;
class StopTaskReply;
class TaskConfig;
class TaskId;
class TimeInterval;

// ===================================================================

class TaskConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:segmenter.TaskConfig) */ {
 public:
  TaskConfig();
  virtual ~TaskConfig();

  TaskConfig(const TaskConfig& from);

  inline TaskConfig& operator=(const TaskConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskConfig& default_instance();

  void Swap(TaskConfig* other);

  // implements Message ----------------------------------------------

  inline TaskConfig* New() const { return New(NULL); }

  TaskConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskConfig& from);
  void MergeFrom(const TaskConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string stream_url = 1;
  void clear_stream_url();
  static const int kStreamUrlFieldNumber = 1;
  const ::std::string& stream_url() const;
  void set_stream_url(const ::std::string& value);
  void set_stream_url(const char* value);
  void set_stream_url(const char* value, size_t size);
  ::std::string* mutable_stream_url();
  ::std::string* release_stream_url();
  void set_allocated_stream_url(::std::string* stream_url);

  // optional uint32 segment_time = 2;
  void clear_segment_time();
  static const int kSegmentTimeFieldNumber = 2;
  ::google::protobuf::uint32 segment_time() const;
  void set_segment_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:segmenter.TaskConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr stream_url_;
  ::google::protobuf::uint32 segment_time_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_segmenter_2eproto();
  friend void protobuf_AssignDesc_segmenter_2eproto();
  friend void protobuf_ShutdownFile_segmenter_2eproto();

  void InitAsDefaultInstance();
  static TaskConfig* default_instance_;
};
// -------------------------------------------------------------------

class StartTaskReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:segmenter.StartTaskReply) */ {
 public:
  StartTaskReply();
  virtual ~StartTaskReply();

  StartTaskReply(const StartTaskReply& from);

  inline StartTaskReply& operator=(const StartTaskReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartTaskReply& default_instance();

  void Swap(StartTaskReply* other);

  // implements Message ----------------------------------------------

  inline StartTaskReply* New() const { return New(NULL); }

  StartTaskReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartTaskReply& from);
  void MergeFrom(const StartTaskReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartTaskReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // optional uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // @@protoc_insertion_point(class_scope:segmenter.StartTaskReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool result_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_segmenter_2eproto();
  friend void protobuf_AssignDesc_segmenter_2eproto();
  friend void protobuf_ShutdownFile_segmenter_2eproto();

  void InitAsDefaultInstance();
  static StartTaskReply* default_instance_;
};
// -------------------------------------------------------------------

class TaskId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:segmenter.TaskId) */ {
 public:
  TaskId();
  virtual ~TaskId();

  TaskId(const TaskId& from);

  inline TaskId& operator=(const TaskId& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskId& default_instance();

  void Swap(TaskId* other);

  // implements Message ----------------------------------------------

  inline TaskId* New() const { return New(NULL); }

  TaskId* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskId& from);
  void MergeFrom(const TaskId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:segmenter.TaskId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_segmenter_2eproto();
  friend void protobuf_AssignDesc_segmenter_2eproto();
  friend void protobuf_ShutdownFile_segmenter_2eproto();

  void InitAsDefaultInstance();
  static TaskId* default_instance_;
};
// -------------------------------------------------------------------

class StopTaskReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:segmenter.StopTaskReply) */ {
 public:
  StopTaskReply();
  virtual ~StopTaskReply();

  StopTaskReply(const StopTaskReply& from);

  inline StopTaskReply& operator=(const StopTaskReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopTaskReply& default_instance();

  void Swap(StopTaskReply* other);

  // implements Message ----------------------------------------------

  inline StopTaskReply* New() const { return New(NULL); }

  StopTaskReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopTaskReply& from);
  void MergeFrom(const StopTaskReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StopTaskReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // optional string errmsg = 2;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 2;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // @@protoc_insertion_point(class_scope:segmenter.StopTaskReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  bool result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_segmenter_2eproto();
  friend void protobuf_AssignDesc_segmenter_2eproto();
  friend void protobuf_ShutdownFile_segmenter_2eproto();

  void InitAsDefaultInstance();
  static StopTaskReply* default_instance_;
};
// -------------------------------------------------------------------

class TimeInterval : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:segmenter.TimeInterval) */ {
 public:
  TimeInterval();
  virtual ~TimeInterval();

  TimeInterval(const TimeInterval& from);

  inline TimeInterval& operator=(const TimeInterval& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeInterval& default_instance();

  void Swap(TimeInterval* other);

  // implements Message ----------------------------------------------

  inline TimeInterval* New() const { return New(NULL); }

  TimeInterval* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeInterval& from);
  void MergeFrom(const TimeInterval& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TimeInterval* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 start_time = 1;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 1;
  ::google::protobuf::int64 start_time() const;
  void set_start_time(::google::protobuf::int64 value);

  // optional int64 end_time = 2;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  ::google::protobuf::int64 end_time() const;
  void set_end_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:segmenter.TimeInterval)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 start_time_;
  ::google::protobuf::int64 end_time_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_segmenter_2eproto();
  friend void protobuf_AssignDesc_segmenter_2eproto();
  friend void protobuf_ShutdownFile_segmenter_2eproto();

  void InitAsDefaultInstance();
  static TimeInterval* default_instance_;
};
// -------------------------------------------------------------------

class GetPlayListConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:segmenter.GetPlayListConfig) */ {
 public:
  GetPlayListConfig();
  virtual ~GetPlayListConfig();

  GetPlayListConfig(const GetPlayListConfig& from);

  inline GetPlayListConfig& operator=(const GetPlayListConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPlayListConfig& default_instance();

  void Swap(GetPlayListConfig* other);

  // implements Message ----------------------------------------------

  inline GetPlayListConfig* New() const { return New(NULL); }

  GetPlayListConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPlayListConfig& from);
  void MergeFrom(const GetPlayListConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetPlayListConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // repeated .segmenter.TimeInterval time_intervals = 2;
  int time_intervals_size() const;
  void clear_time_intervals();
  static const int kTimeIntervalsFieldNumber = 2;
  const ::segmenter::TimeInterval& time_intervals(int index) const;
  ::segmenter::TimeInterval* mutable_time_intervals(int index);
  ::segmenter::TimeInterval* add_time_intervals();
  ::google::protobuf::RepeatedPtrField< ::segmenter::TimeInterval >*
      mutable_time_intervals();
  const ::google::protobuf::RepeatedPtrField< ::segmenter::TimeInterval >&
      time_intervals() const;

  // @@protoc_insertion_point(class_scope:segmenter.GetPlayListConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::segmenter::TimeInterval > time_intervals_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_segmenter_2eproto();
  friend void protobuf_AssignDesc_segmenter_2eproto();
  friend void protobuf_ShutdownFile_segmenter_2eproto();

  void InitAsDefaultInstance();
  static GetPlayListConfig* default_instance_;
};
// -------------------------------------------------------------------

class GetPlayListReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:segmenter.GetPlayListReply) */ {
 public:
  GetPlayListReply();
  virtual ~GetPlayListReply();

  GetPlayListReply(const GetPlayListReply& from);

  inline GetPlayListReply& operator=(const GetPlayListReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPlayListReply& default_instance();

  void Swap(GetPlayListReply* other);

  // implements Message ----------------------------------------------

  inline GetPlayListReply* New() const { return New(NULL); }

  GetPlayListReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPlayListReply& from);
  void MergeFrom(const GetPlayListReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetPlayListReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // optional string errmsg = 2;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 2;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // optional string playlist_url = 3;
  void clear_playlist_url();
  static const int kPlaylistUrlFieldNumber = 3;
  const ::std::string& playlist_url() const;
  void set_playlist_url(const ::std::string& value);
  void set_playlist_url(const char* value);
  void set_playlist_url(const char* value, size_t size);
  ::std::string* mutable_playlist_url();
  ::std::string* release_playlist_url();
  void set_allocated_playlist_url(::std::string* playlist_url);

  // @@protoc_insertion_point(class_scope:segmenter.GetPlayListReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::internal::ArenaStringPtr playlist_url_;
  bool result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_segmenter_2eproto();
  friend void protobuf_AssignDesc_segmenter_2eproto();
  friend void protobuf_ShutdownFile_segmenter_2eproto();

  void InitAsDefaultInstance();
  static GetPlayListReply* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskConfig

// optional string stream_url = 1;
inline void TaskConfig::clear_stream_url() {
  stream_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskConfig::stream_url() const {
  // @@protoc_insertion_point(field_get:segmenter.TaskConfig.stream_url)
  return stream_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskConfig::set_stream_url(const ::std::string& value) {
  
  stream_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:segmenter.TaskConfig.stream_url)
}
inline void TaskConfig::set_stream_url(const char* value) {
  
  stream_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:segmenter.TaskConfig.stream_url)
}
inline void TaskConfig::set_stream_url(const char* value, size_t size) {
  
  stream_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:segmenter.TaskConfig.stream_url)
}
inline ::std::string* TaskConfig::mutable_stream_url() {
  
  // @@protoc_insertion_point(field_mutable:segmenter.TaskConfig.stream_url)
  return stream_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskConfig::release_stream_url() {
  // @@protoc_insertion_point(field_release:segmenter.TaskConfig.stream_url)
  
  return stream_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskConfig::set_allocated_stream_url(::std::string* stream_url) {
  if (stream_url != NULL) {
    
  } else {
    
  }
  stream_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_url);
  // @@protoc_insertion_point(field_set_allocated:segmenter.TaskConfig.stream_url)
}

// optional uint32 segment_time = 2;
inline void TaskConfig::clear_segment_time() {
  segment_time_ = 0u;
}
inline ::google::protobuf::uint32 TaskConfig::segment_time() const {
  // @@protoc_insertion_point(field_get:segmenter.TaskConfig.segment_time)
  return segment_time_;
}
inline void TaskConfig::set_segment_time(::google::protobuf::uint32 value) {
  
  segment_time_ = value;
  // @@protoc_insertion_point(field_set:segmenter.TaskConfig.segment_time)
}

// -------------------------------------------------------------------

// StartTaskReply

// optional bool result = 1;
inline void StartTaskReply::clear_result() {
  result_ = false;
}
inline bool StartTaskReply::result() const {
  // @@protoc_insertion_point(field_get:segmenter.StartTaskReply.result)
  return result_;
}
inline void StartTaskReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:segmenter.StartTaskReply.result)
}

// optional uint32 id = 2;
inline void StartTaskReply::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 StartTaskReply::id() const {
  // @@protoc_insertion_point(field_get:segmenter.StartTaskReply.id)
  return id_;
}
inline void StartTaskReply::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:segmenter.StartTaskReply.id)
}

// optional string errmsg = 3;
inline void StartTaskReply::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartTaskReply::errmsg() const {
  // @@protoc_insertion_point(field_get:segmenter.StartTaskReply.errmsg)
  return errmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTaskReply::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:segmenter.StartTaskReply.errmsg)
}
inline void StartTaskReply::set_errmsg(const char* value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:segmenter.StartTaskReply.errmsg)
}
inline void StartTaskReply::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:segmenter.StartTaskReply.errmsg)
}
inline ::std::string* StartTaskReply::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:segmenter.StartTaskReply.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartTaskReply::release_errmsg() {
  // @@protoc_insertion_point(field_release:segmenter.StartTaskReply.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartTaskReply::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:segmenter.StartTaskReply.errmsg)
}

// -------------------------------------------------------------------

// TaskId

// optional uint32 id = 1;
inline void TaskId::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TaskId::id() const {
  // @@protoc_insertion_point(field_get:segmenter.TaskId.id)
  return id_;
}
inline void TaskId::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:segmenter.TaskId.id)
}

// -------------------------------------------------------------------

// StopTaskReply

// optional bool result = 1;
inline void StopTaskReply::clear_result() {
  result_ = false;
}
inline bool StopTaskReply::result() const {
  // @@protoc_insertion_point(field_get:segmenter.StopTaskReply.result)
  return result_;
}
inline void StopTaskReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:segmenter.StopTaskReply.result)
}

// optional string errmsg = 2;
inline void StopTaskReply::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopTaskReply::errmsg() const {
  // @@protoc_insertion_point(field_get:segmenter.StopTaskReply.errmsg)
  return errmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopTaskReply::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:segmenter.StopTaskReply.errmsg)
}
inline void StopTaskReply::set_errmsg(const char* value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:segmenter.StopTaskReply.errmsg)
}
inline void StopTaskReply::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:segmenter.StopTaskReply.errmsg)
}
inline ::std::string* StopTaskReply::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:segmenter.StopTaskReply.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopTaskReply::release_errmsg() {
  // @@protoc_insertion_point(field_release:segmenter.StopTaskReply.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopTaskReply::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:segmenter.StopTaskReply.errmsg)
}

// -------------------------------------------------------------------

// TimeInterval

// optional int64 start_time = 1;
inline void TimeInterval::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TimeInterval::start_time() const {
  // @@protoc_insertion_point(field_get:segmenter.TimeInterval.start_time)
  return start_time_;
}
inline void TimeInterval::set_start_time(::google::protobuf::int64 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:segmenter.TimeInterval.start_time)
}

// optional int64 end_time = 2;
inline void TimeInterval::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TimeInterval::end_time() const {
  // @@protoc_insertion_point(field_get:segmenter.TimeInterval.end_time)
  return end_time_;
}
inline void TimeInterval::set_end_time(::google::protobuf::int64 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:segmenter.TimeInterval.end_time)
}

// -------------------------------------------------------------------

// GetPlayListConfig

// optional uint32 id = 1;
inline void GetPlayListConfig::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 GetPlayListConfig::id() const {
  // @@protoc_insertion_point(field_get:segmenter.GetPlayListConfig.id)
  return id_;
}
inline void GetPlayListConfig::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:segmenter.GetPlayListConfig.id)
}

// repeated .segmenter.TimeInterval time_intervals = 2;
inline int GetPlayListConfig::time_intervals_size() const {
  return time_intervals_.size();
}
inline void GetPlayListConfig::clear_time_intervals() {
  time_intervals_.Clear();
}
inline const ::segmenter::TimeInterval& GetPlayListConfig::time_intervals(int index) const {
  // @@protoc_insertion_point(field_get:segmenter.GetPlayListConfig.time_intervals)
  return time_intervals_.Get(index);
}
inline ::segmenter::TimeInterval* GetPlayListConfig::mutable_time_intervals(int index) {
  // @@protoc_insertion_point(field_mutable:segmenter.GetPlayListConfig.time_intervals)
  return time_intervals_.Mutable(index);
}
inline ::segmenter::TimeInterval* GetPlayListConfig::add_time_intervals() {
  // @@protoc_insertion_point(field_add:segmenter.GetPlayListConfig.time_intervals)
  return time_intervals_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::segmenter::TimeInterval >*
GetPlayListConfig::mutable_time_intervals() {
  // @@protoc_insertion_point(field_mutable_list:segmenter.GetPlayListConfig.time_intervals)
  return &time_intervals_;
}
inline const ::google::protobuf::RepeatedPtrField< ::segmenter::TimeInterval >&
GetPlayListConfig::time_intervals() const {
  // @@protoc_insertion_point(field_list:segmenter.GetPlayListConfig.time_intervals)
  return time_intervals_;
}

// -------------------------------------------------------------------

// GetPlayListReply

// optional bool result = 1;
inline void GetPlayListReply::clear_result() {
  result_ = false;
}
inline bool GetPlayListReply::result() const {
  // @@protoc_insertion_point(field_get:segmenter.GetPlayListReply.result)
  return result_;
}
inline void GetPlayListReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:segmenter.GetPlayListReply.result)
}

// optional string errmsg = 2;
inline void GetPlayListReply::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPlayListReply::errmsg() const {
  // @@protoc_insertion_point(field_get:segmenter.GetPlayListReply.errmsg)
  return errmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPlayListReply::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:segmenter.GetPlayListReply.errmsg)
}
inline void GetPlayListReply::set_errmsg(const char* value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:segmenter.GetPlayListReply.errmsg)
}
inline void GetPlayListReply::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:segmenter.GetPlayListReply.errmsg)
}
inline ::std::string* GetPlayListReply::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:segmenter.GetPlayListReply.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPlayListReply::release_errmsg() {
  // @@protoc_insertion_point(field_release:segmenter.GetPlayListReply.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPlayListReply::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:segmenter.GetPlayListReply.errmsg)
}

// optional string playlist_url = 3;
inline void GetPlayListReply::clear_playlist_url() {
  playlist_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPlayListReply::playlist_url() const {
  // @@protoc_insertion_point(field_get:segmenter.GetPlayListReply.playlist_url)
  return playlist_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPlayListReply::set_playlist_url(const ::std::string& value) {
  
  playlist_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:segmenter.GetPlayListReply.playlist_url)
}
inline void GetPlayListReply::set_playlist_url(const char* value) {
  
  playlist_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:segmenter.GetPlayListReply.playlist_url)
}
inline void GetPlayListReply::set_playlist_url(const char* value, size_t size) {
  
  playlist_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:segmenter.GetPlayListReply.playlist_url)
}
inline ::std::string* GetPlayListReply::mutable_playlist_url() {
  
  // @@protoc_insertion_point(field_mutable:segmenter.GetPlayListReply.playlist_url)
  return playlist_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPlayListReply::release_playlist_url() {
  // @@protoc_insertion_point(field_release:segmenter.GetPlayListReply.playlist_url)
  
  return playlist_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPlayListReply::set_allocated_playlist_url(::std::string* playlist_url) {
  if (playlist_url != NULL) {
    
  } else {
    
  }
  playlist_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playlist_url);
  // @@protoc_insertion_point(field_set_allocated:segmenter.GetPlayListReply.playlist_url)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace segmenter

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_segmenter_2eproto__INCLUDED
